# ruby
function envrvm() { source $HOME/.rvm/scripts/rvm && rvm use 2.4.0 --default; }
function envrvm_disable() { rvm use system; }

# helpful functions
function passgenold() { openssl rand -base64 32 | base64 | head -c 16; }
function passgen() {
  if [ $# -ne 1 ]; then
    echo "ARGS: <lenght>"
  else
    pwgen -s $1 1 | tr -d '\n' | pbcopy && pbpaste && echo -e "\n==> Sent to clipboard"
  fi
}

function macgenxen(){
  printf '00:16:3E:%02X:%02X:%02X\n' \
  $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256));
}

cdb ()
{
    local dir;
    _cdargs_get_dir "$1" && cd "$dir" && echo `pwd`
}

# git
function gitpullall() {
  CWD=`pwd`; find $PWD -type d -name .git -print0 |\
  xargs -0 -I{} dirname {} | xargs -I{} sh -c \
  'cd {}; echo "GIT pulling {}"; git pull; git submodule update --recursive'
}
function gitinfoall() {
  CWD=`pwd`; find $PWD -type d -name .git -print0 |\
  xargs -0 -I{} dirname {} | xargs -I{} sh -c \
  'cd {}; git config --get remote.origin.url'
}

function tcp-get {
  if [ $# -ne 2 ]; then
    echo "ARGS: <host> <port>"
  else
    exec 3<>/dev/tcp/$1/$2
    echo -e "GET / HTTP/1.1\r\nConnection: close\r\n\r\n" >&3
    cat <&3
  fi
}

ssh-no-key (){
  ssh -v -o PreferredAuthentications=password -o PubkeyAuthentication=no "$@"
}

vimremote(){
  if [ $# -ne 3 ]; then
    echo "ARGS: <user> <host>[:port] <full_path_to_file>"
  else
    vim scp://$1@$2//$3
  fi
}

#passthis(){
#  if [ $# -ne 3 ]; then
#    echo "ARGS: <account> <app> <keychain>"
#  else
#    security find-generic-password -a $1 -s $2 -w ~/Library/Keychains/$3.keychain | tr -d "\n"
#  fi
#}

# PKI
function jksprint { keytool -v -list -keystore $1; }
function pemprint { openssl x509 -in $1 -noout -issuer -subject -dates -fingerprint -serial; }
function pemprintfull { openssl x509 -in $1 -text -noout; }
function pemget { echo | openssl s_client -showcerts -connect $1;}
function pemgetsni { echo | openssl s_client -showcerts -connect $1 -servername ${1%:443};}
function pemgetsplit { echo | openssl s_client -showcerts -connect $1 2> /dev/null | awk -v c=-1 '/-----BEGIN CERTIFICATE-----/{inc=1;c++} inc {print > ("level" c ".crt")} /---END CERTIFICATE-----/{inc=0}'; }
function pemsplit { cat $1 | awk -v c=-1 '/-----BEGIN CERTIFICATE-----/{inc=1;c++} inc {print > ("level" c ".crt")} /---END CERTIFICATE-----/{inc=0}'; }
function pemcachain { openssl verify -CAfile $1 $2; }
function pemmodpriv { openssl rsa -noout -modulus -in $1 | md5; }
function pemmodpub { openssl x509 -noout -modulus -in $1 | md5; }
function pemmodreq { openssl req -noout -modulus -in $1 | md5; }
function crlpemprint { openssl crl -inform PEM -in $1 -text -noout; }
function crlderprint { openssl crl -inform DER -in $1 -text -noout; }
function pemkeyremove { openssl rsa -in $1 -out $2; }
function p12topem { openssl pkcs12 -in $1 -out $2 -clcerts; }
function pemtop12 { openssl pkcs12 -export -inkey $1 -in $1 -out $2 ; }
function pemserver { echo '0:4433' ; openssl s_server -cert $1 -key $2 -www; }
function pemgetprint { echo | openssl s_client -showcerts -connect $1 | openssl x509 -in /dev/stdin -text -noout; }

# opensource git config
function git-config-opensource {
  git config credential.helper store
  git config user.name "Joel Bastos"
  git config user.email "kintoandar@gmail.com"
  git config commit.gpgsign true
  git config --global gitreview.username "kintoandar"
}

#function git-open {
#  open $(git remote -v | grep -v heroku | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#http://#' -e 's#:#/#2' -e 's#.git$##') | head -n1
#}
